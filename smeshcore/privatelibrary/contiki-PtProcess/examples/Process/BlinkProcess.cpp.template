/*
 * Copyright (c) 2011-2014, SmeshLink Technology Ltd.
 * All rights reserved.
 * 
 * This example demonstrates how to set up a custom process
 * by subclassing the PtProcess class.
 */

#include <stdio.h>

extern "C" {
#include "dev/leds.h"
}

#include "PtProcess.h"

/*
 * Define a process to blink one led every second.
 */
class BlinkProcess : public PtProcess {
private:
	/* the led to blink */
	uint8_t led;
	/* 
	 * The timer must be defined as a member variable
	 * to avoid conflict among different instances.
	 */
	struct etimer timer;
public:
	BlinkProcess(uint8_t led) : PtProcess() { this->led = led; }
protected:
	/*
	 * Overrides this method below to do the work, with the same routines
	 * as Contiki processes defined via the PROCESS_THREAD macro.
	 */
	PT_THREAD(run(struct pt *process_pt, process_event_t ev, process_data_t data))
	{
		PROCESS_BEGIN();

		etimer_set(&timer, CLOCK_CONF_SECOND * 1);
		
		while(1) {
			PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
			leds_toggle(led);
			etimer_reset(&timer);
		}
		
		PROCESS_END();
	}
};

/*
 * Then, instantiates two instances of BlinkProcess.
 * Both of these processes will be started once the system boots.
 */
BlinkProcess blinkYellow(LEDS_YELLOW);
BlinkProcess blinkRed(LEDS_RED);
